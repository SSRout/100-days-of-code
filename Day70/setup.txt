heroku setup
=================
1. Sign up for a free account on www.heroku.com

2. Create a new application on Heroku:

Give your new app a unique name, I used angela-blog which means that no one else can use that name.
It's just like a web address, it has to be unique. Leave the region as US and click Create App.

3. Connect Heroku to your GitHub project. Under the Deploy tab, select Connect to GitHub

4. Sign in to your GitHub account (the account where your blog project repository exists).

5. Search for the name of your blog project repository name (if in doubt check GitHub) and connect it to Heroku.

6. Scrolling further down the page on the deploy pane, click on Enable Automatic Deploys.
 This means that whenever you push a new commit to your remote GitHub repository, it will automatically re-deploy your server with the changes.

7. Finally, in Manual deploys, click on Deploy Branch to deploy for the first time.
NOTE: This step will take some time, but you can watch the logs for any errors and Google them if they prevent deployment. 
It might mean that you miss a step that we covered.

8. Once it's done, click View to see your web app, NOTE: it won't work just yet:

9. Instead of using the command line as they suggested, we're going to view the logs on heroku.com

Make sure that you're in your app's dashboard page, go to More -> View Logs

10.There are many WSGIs to choose from, but we'll use the most popular - gunicorn.

So Heroku will call gunicorn to run our code and gunicorn will know how to speak to Heroku.

WSGI server with gunicorn
==========================

1. In PyCharm go to the Python Interpreter for your Project and install the gunicorn package:

Windows: Files -> Settings -> Project: name -> Python Interpretor

Mac: PyCharm -> Preferences -> Project: name-> Python Interpretor
2. Add the package to the requirements.txt file on a new line:

gunicorn==<version number>

Next, we need to tell Heroku about our gunicorn server and how to run our Flask app, we do that using a Procfile.


3. Create a new file in the project top-level folder called Procfile

NOTE: make sure you spell the name of the file exactly as you see above, with a capital P and no file extension.

Type the following into the Procfile:

web: gunicorn main:app
This will tell Heroku to create a web worker, one that is able to receive HTTP requests.

To use gunicorn to serve your web app

And the Flask app object is the main.py file.

NOTE: If your app is not inside a file called main.py then you should change main to your file name.


4. Add the new Procfile/requirements.txt to git and commit the changes then push it to the remote.

Note: If you forgot to "Commit and Push" and just clicked on "Commit" then just go to VSC -> Git -> Push

Because we enabled automatic re-deploys, if you go to your app's logs you should see it being 
re-built an re-deployed with the changes we have pushed to GitHub.

All going well, you should now be able to go to your app and see the project up and running.

use Postgres 
====================
1. Go to your app's dashboard on Heroku and go to the Resources tab. Then search for Heroku Postgres.

Next, you will see a popup, keep the free-tier and click Submit.

Next, we need to connect to this Heroku Postgres database instead of the local SQLite database.

2. Go to Settings -> Reveal Config Vars

This is the same as our .env file, it's where you can put top secret stuff like API keys and passwords.
Then you give it a variable name and you can tap into the value using os.environ.get("VAR_NAME") .

You'll see that we already have the Postgres database config var set up. We just need to connect to it from our code file.

3. Copy the name of the database config var (mine is DATABASE_URL) and add it to your main.py instead of the sqlite URL.

4. Let's move our SECRET_KEY into the config var as well.

5. SQLite is pre-installed for all Python projects, but if we are going to use Postgres,
  we'll need to install the psycopg2-binary packages as well. Note,
 you'll also need to add the package name and version to requirements.txt as well as commit and push the updates.


Important, make sure that you don't include any pipfile or pipfile.lock files in your GitHub repo (you can delete them and commit the changes).
 Heroku needs to know which packages they should install on their side


Because our main.py SQLAlchemy database is now pointing to an environment variable that is only avilable on Heroku,
if you run the app right now locally, you will get some errors.

Instead, we want to provide SQLite as the alternative when we're developing the app locally.

5. Update the app config to use "DATABASE_URL" environment variable if provided, but if it's None (e.g. when running locally)
 then we can provide sqlite:///blog.db as the alternative.

app.config['SQLALCHEMY_DATABASE_URI'] = os.environ.get("DATABASE_URL",  "sqlite:///blog.db")

Finally, if you go to your heroku app, it should now be up and using a Postgres database.


